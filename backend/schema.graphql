# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  membershipSignup(variationId: ID!, returnUrl: String!): JSON
  customSignup(
    email: String!
    name: String!
    password: String
    preferredName: String
    phone: String!
    phoneType: String
    birthYear: Int
    contact: Boolean
    createUser: Boolean
    suburb: String
  ): JSON
  stripeManage(returnUrl: String!): JSON
  createClub(data: ClubCreateInput!): Club
  createClubs(data: [ClubCreateInput!]!): [Club]
  updateClub(where: ClubWhereUniqueInput!, data: ClubUpdateInput!): Club
  updateClubs(data: [ClubUpdateArgs!]!): [Club]
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteClubs(where: [ClubWhereUniqueInput!]!): [Club]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(
    where: MembershipWhereUniqueInput!
    data: MembershipUpdateInput!
  ): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  createVariation(data: VariationCreateInput!): Variation
  createVariations(data: [VariationCreateInput!]!): [Variation]
  updateVariation(
    where: VariationWhereUniqueInput!
    data: VariationUpdateInput!
  ): Variation
  updateVariations(data: [VariationUpdateArgs!]!): [Variation]
  deleteVariation(where: VariationWhereUniqueInput!): Variation
  deleteVariations(where: [VariationWhereUniqueInput!]!): [Variation]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(
    where: SubscriptionWhereUniqueInput!
    data: SubscriptionUpdateInput!
  ): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
}

type Club {
  id: ID!
  name: String
  subscriptions(
    where: SubscriptionWhereInput! = {}
    orderBy: [SubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subscription!]
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  status: String
  slug: String
  description: String
  about: Club_about_Document
}

type Club_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ClubWhereUniqueInput {
  id: ID
  slug: String
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IDFilter
  name: StringFilter
  subscriptions: SubscriptionManyRelationFilter
  posts: PostManyRelationFilter
  status: StringNullableFilter
  slug: StringFilter
  description: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SubscriptionManyRelationFilter {
  every: SubscriptionWhereInput
  some: SubscriptionWhereInput
  none: SubscriptionWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ClubOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  description: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ClubUpdateInput {
  name: String
  subscriptions: SubscriptionRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  status: String
  slug: String
  description: String
  about: JSON
}

input SubscriptionRelateToManyForUpdateInput {
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ClubUpdateArgs {
  where: ClubWhereUniqueInput!
  data: ClubUpdateInput!
}

input ClubCreateInput {
  name: String
  subscriptions: SubscriptionRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  status: String
  slug: String
  description: String
  about: JSON
}

input SubscriptionRelateToManyForCreateInput {
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Membership {
  id: ID!
  name: String
  user: User
  variation: Variation
  signupSessionId: String
  status: String
  startDate: DateTime
  renewalDate: DateTime
  stripeSubscriptionId: String
  contactPreference: String
  receiveRenewal: Boolean
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input MembershipWhereUniqueInput {
  id: ID
  signupSessionId: String
  stripeSubscriptionId: String
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  user: UserWhereInput
  variation: VariationWhereInput
  signupSessionId: StringFilter
  status: StringNullableFilter
  startDate: DateTimeNullableFilter
  renewalDate: DateTimeNullableFilter
  stripeSubscriptionId: StringFilter
  contactPreference: StringNullableFilter
  receiveRenewal: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input MembershipOrderByInput {
  id: OrderDirection
  signupSessionId: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  renewalDate: OrderDirection
  stripeSubscriptionId: OrderDirection
  contactPreference: OrderDirection
  receiveRenewal: OrderDirection
}

input MembershipUpdateInput {
  user: UserRelateToOneForUpdateInput
  variation: VariationRelateToOneForUpdateInput
  signupSessionId: String
  status: String
  startDate: DateTime
  renewalDate: DateTime
  stripeSubscriptionId: String
  contactPreference: String
  receiveRenewal: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input VariationRelateToOneForUpdateInput {
  create: VariationCreateInput
  connect: VariationWhereUniqueInput
  disconnect: Boolean
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  user: UserRelateToOneForCreateInput
  variation: VariationRelateToOneForCreateInput
  signupSessionId: String
  status: String
  startDate: DateTime
  renewalDate: DateTime
  stripeSubscriptionId: String
  contactPreference: String
  receiveRenewal: Boolean
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input VariationRelateToOneForCreateInput {
  create: VariationCreateInput
  connect: VariationWhereUniqueInput
}

type Variation {
  id: ID!
  name: String
  subscription: Subscription
  status: String
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  price: Int
  about: Variation_about_Document
  chargeInterval: String
  chargeIntervalCount: Int
  totalCount: Int
  stripePriceId: String
}

type Variation_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input VariationWhereUniqueInput {
  id: ID
  stripePriceId: String
}

input VariationWhereInput {
  AND: [VariationWhereInput!]
  OR: [VariationWhereInput!]
  NOT: [VariationWhereInput!]
  id: IDFilter
  name: StringFilter
  subscription: SubscriptionWhereInput
  status: StringNullableFilter
  memberships: MembershipManyRelationFilter
  price: IntFilter
  chargeInterval: StringFilter
  chargeIntervalCount: IntFilter
  totalCount: IntNullableFilter
  stripePriceId: StringFilter
}

input MembershipManyRelationFilter {
  every: MembershipWhereInput
  some: MembershipWhereInput
  none: MembershipWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input VariationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  price: OrderDirection
  chargeInterval: OrderDirection
  chargeIntervalCount: OrderDirection
  totalCount: OrderDirection
  stripePriceId: OrderDirection
}

input VariationUpdateInput {
  name: String
  subscription: SubscriptionRelateToOneForUpdateInput
  status: String
  memberships: MembershipRelateToManyForUpdateInput
  price: Int
  about: JSON
  chargeInterval: String
  chargeIntervalCount: Int
  totalCount: Int
  stripePriceId: String
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input MembershipRelateToManyForUpdateInput {
  disconnect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input VariationUpdateArgs {
  where: VariationWhereUniqueInput!
  data: VariationUpdateInput!
}

input VariationCreateInput {
  name: String
  subscription: SubscriptionRelateToOneForCreateInput
  status: String
  memberships: MembershipRelateToManyForCreateInput
  price: Int
  about: JSON
  chargeInterval: String
  chargeIntervalCount: Int
  totalCount: Int
  stripePriceId: String
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

input MembershipRelateToManyForCreateInput {
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

type Subscription {
  id: ID!
  name: String
  description: String
  club: Club
  variations(
    where: VariationWhereInput! = {}
    orderBy: [VariationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variation!]
  variationsCount(where: VariationWhereInput! = {}): Int
  fromEmail: String
  emailTemplate: String
  slug: String
  autoRenew: Boolean
  about: Subscription_about_Document
  stripeProductId: String
  status: String
}

type Subscription_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SubscriptionWhereUniqueInput {
  id: ID
  slug: String
  stripeProductId: String
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  club: ClubWhereInput
  variations: VariationManyRelationFilter
  fromEmail: StringFilter
  emailTemplate: StringFilter
  slug: StringFilter
  autoRenew: BooleanFilter
  stripeProductId: StringFilter
  status: StringNullableFilter
}

input VariationManyRelationFilter {
  every: VariationWhereInput
  some: VariationWhereInput
  none: VariationWhereInput
}

input SubscriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  fromEmail: OrderDirection
  emailTemplate: OrderDirection
  slug: OrderDirection
  autoRenew: OrderDirection
  stripeProductId: OrderDirection
  status: OrderDirection
}

input SubscriptionUpdateInput {
  name: String
  description: String
  club: ClubRelateToOneForUpdateInput
  variations: VariationRelateToManyForUpdateInput
  fromEmail: String
  emailTemplate: String
  slug: String
  autoRenew: Boolean
  about: JSON
  stripeProductId: String
  status: String
}

input ClubRelateToOneForUpdateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
  disconnect: Boolean
}

input VariationRelateToManyForUpdateInput {
  disconnect: [VariationWhereUniqueInput!]
  set: [VariationWhereUniqueInput!]
  create: [VariationCreateInput!]
  connect: [VariationWhereUniqueInput!]
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  name: String
  description: String
  club: ClubRelateToOneForCreateInput
  variations: VariationRelateToManyForCreateInput
  fromEmail: String
  emailTemplate: String
  slug: String
  autoRenew: Boolean
  about: JSON
  stripeProductId: String
  status: String
}

input ClubRelateToOneForCreateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
}

input VariationRelateToManyForCreateInput {
  create: [VariationCreateInput!]
  connect: [VariationWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  club: Club
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  club: ClubWhereInput
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  club: ClubRelateToOneForUpdateInput
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  club: ClubRelateToOneForCreateInput
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canManageClubs: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageMemberships: BooleanFilter
  canManagePosts: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canManageClubs: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageMemberships: OrderDirection
  canManagePosts: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  subjectId: String
  preferredName: String
  phone: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  isAdmin: Boolean
  role: Role
  householdMembers: JSON
  stripeCustomerId: String
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  subjectId: String
  stripeCustomerId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  subjectId: StringFilter
  preferredName: StringFilter
  phone: StringFilter
  posts: PostManyRelationFilter
  isAdmin: BooleanFilter
  role: RoleWhereInput
  stripeCustomerId: StringFilter
  memberships: MembershipManyRelationFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  subjectId: OrderDirection
  preferredName: OrderDirection
  phone: OrderDirection
  isAdmin: OrderDirection
  stripeCustomerId: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  subjectId: String
  preferredName: String
  phone: String
  posts: PostRelateToManyForUpdateInput
  isAdmin: Boolean
  role: RoleRelateToOneForUpdateInput
  householdMembers: JSON
  stripeCustomerId: String
  memberships: MembershipRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  subjectId: String
  preferredName: String
  phone: String
  posts: PostRelateToManyForCreateInput
  isAdmin: Boolean
  role: RoleRelateToOneForCreateInput
  householdMembers: JSON
  stripeCustomerId: String
  memberships: MembershipRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  clubs(
    where: ClubWhereInput! = {}
    orderBy: [ClubOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Club!]
  club(where: ClubWhereUniqueInput!): Club
  clubsCount(where: ClubWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membership(where: MembershipWhereUniqueInput!): Membership
  membershipsCount(where: MembershipWhereInput! = {}): Int
  variations(
    where: VariationWhereInput! = {}
    orderBy: [VariationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variation!]
  variation(where: VariationWhereUniqueInput!): Variation
  variationsCount(where: VariationWhereInput! = {}): Int
  subscriptions(
    where: SubscriptionWhereInput! = {}
    orderBy: [SubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
